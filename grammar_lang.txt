V1
expression: literal | unary | binary | grouping;
literal: NUMBER | STRING | "true" | "false" | "None";
grouping: "(" expression ")";
unary: ("-" | "!") expression;
binary: expression operator expression;
operator: "==" | "!=" | "<=" | ">=" | "<" | ">" | "+" | "-" | "*" | "/";

V2

expression: comma | conditional
conditional: equality ( "?" expression ":" conditional )?
comma: equality (( "," ) equality )*
equality: comparison (( "!=" | "==" ) comparison)* ;
comparison: term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term: factor ( "+" | "-" factor )* ;
factor: unary ( "/" | "*" unary )* ;
unary: ( "!" | "-") unary | primary;
primary: NUMBER | STRING | "true" | "false" | "None" | IDENTIFIER | "(" expression ")" ;   

V3

program: declaration* EOF ;
declaration: statement | varDecl ; 
varDecl: "var" IDENTIFIER ("=" expression )? ;
statement: exprStatement | ifStatement | printStatement | block;
block: "{" declaration "}" ;
exprStatement: expression ";" ;
printStatement: "print" expression ";" ;

ifStatement: "if" "(" expression ")" statement ;
whileStatement: "while" "(" expression ")" declaration ;
expression: comma | conditional | varAssign  | logicOr ;
varAssign: IDENTIFIER "=" unary ;
logicOr: logicAnd ("or" logicAnd )* ;
logicAnd: equality ( "and" equality )* ;
conditional: equality ( "?" expression ":" conditional )?
comma: equality (( "," ) equality )*
equality: comparison (( "!=" | "==" ) comparison)* ;
comparison: term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term: factor ( "+" | "-" factor )* ;
factor: unary ( "/" | "*" unary )* ;
unary: ( "!" | "-") unary | call;
call: primary ( "(" args? ")" )* ;
args: expression ( "," expression )* ;
primary: NUMBER | STRING | "true" | "false" | "None" | IDENTIFIER | "break" | "(" expression ")" ;   