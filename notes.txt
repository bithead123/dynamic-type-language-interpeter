важные функции парсера:
- парс структур токенов
- отлов ошибок и синхронизация
- восстановление после исправления ошибки 

если в определенном месте файла случилась ошибка парсинга, парсер не останавливается на этом. 
Он пропускает текущую инструкцию, дампит её пользователю, и продолжает разбор.
Последовательность инструкций можно связать в линк лист, для восстановления после исправления ошибки.

Пользователь обнаруживает ошибку у себя в файле, делает изменения, затем
в парсер прилетает изменение:
- файл
- строка
- оффсет
- что прибавилось
Это событие можно обработать на уровне парсера

PARSER
1) parsing tokens
2) panic mode
3) sync changes
4) notifies.

по пути посещения узлов можно собирать стек ошибок и 
дампить, если не удалось ничего собрать, иначе - очищать.

структуру токена можно использовать для дампа при возниковении ошибки (runtime/compile)

FUNCTION:
eval аргументов
callee -> as callable (можно как интерфейс)
    obj call(interpreter, args);
fn arity - кол-во аргументов для вызова

iFunc:
- args_proto arity()
- obj call(interpreter, args)

встроенные функции
должна быть поддержка: лямбды, контекста, переменных, возврата, рекурсии
локальные функции. 

встроить стек

после парсера можно выполнить проходы по дереву, которые могут выполнить какую-то полезную
работу.
затем после всех проходов выполнить код.

skip: 
- for
- continue
- break

------------------------------- CVM
single pass compilation
precedence.
infix order.

one byte instructions to compilation.
compile преобразование токенов в инструкции и заклад в чанк.
interpret исполнение на ВМ кода.